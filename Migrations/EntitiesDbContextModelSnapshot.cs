// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using golden_snitch.Entities;

#nullable disable

namespace golden_snitch.Migrations
{
    [DbContext(typeof(EntitiesDbContext))]
    partial class EntitiesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("golden_snitch.Entities.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Australia/Melbourne");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("golden_snitch.Entities.Scheduler.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("JobTagId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Australia/Melbourne");

                    b.Property<string>("WorkDays")
                        .IsRequired()
                        .HasColumnType("varchar(7)");

                    b.HasKey("Id");

                    b.HasIndex("JobTagId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("golden_snitch.Entities.Scheduler.JobTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("LastModifiedDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Australia/Melbourne");

                    b.HasKey("Id");

                    b.ToTable("JobTags");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tenants.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("LastModifiedDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Australia/Melbourne");

                    b.HasKey("Id");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tenants.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimSetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("LastModifiedDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Australia/Melbourne");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ClaimSetId");

                    b.ToTable("Claim");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tenants.ClaimSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("LastModifiedDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Australia/Melbourne");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ClaimSet");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tickets.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDateUTC")
                        .HasColumnType("datetime");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModifiedDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketTagId")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Australia/Melbourne");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TicketTagId");

                    b.ToTable("Tickets", t =>
                        {
                            t.HasComment("Tickets stands for the tasks with description and other props");
                        });
                });

            modelBuilder.Entity("golden_snitch.Entities.Tickets.TicketComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("LastModifiedDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Australia/Melbourne");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketComments");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tickets.TicketHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("LastModifiedDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Australia/Melbourne");

                    b.Property<DateTime>("WorkingDateUTC")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketTags");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tickets.TicketTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("LastModifiedDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Australia/Melbourne");

                    b.HasKey("Id");

                    b.ToTable("TicketTag");
                });

            modelBuilder.Entity("golden_snitch.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("LastModifiedDateUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PrivilegeLevel")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Australia/Melbourne");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDateUTC = new DateTime(2024, 3, 3, 4, 59, 38, 517, DateTimeKind.Utc).AddTicks(7509),
                            Email = "*******",
                            LastModifiedDateUTC = new DateTime(2024, 3, 3, 4, 59, 38, 517, DateTimeKind.Utc).AddTicks(7510),
                            Name = "Super Admin",
                            PrivilegeLevel = 3
                        },
                        new
                        {
                            Id = 2,
                            CreationDateUTC = new DateTime(2024, 3, 3, 4, 59, 38, 517, DateTimeKind.Utc).AddTicks(7512),
                            Email = "*******",
                            LastModifiedDateUTC = new DateTime(2024, 3, 3, 4, 59, 38, 517, DateTimeKind.Utc).AddTicks(7512),
                            Name = "Weiss",
                            PrivilegeLevel = 0
                        });
                });

            modelBuilder.Entity("golden_snitch.Entities.Scheduler.Job", b =>
                {
                    b.HasOne("golden_snitch.Entities.Scheduler.JobTag", "JobTag")
                        .WithMany("Jobs")
                        .HasForeignKey("JobTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("golden_snitch.Entities.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTag");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tenants.Claim", b =>
                {
                    b.HasOne("golden_snitch.Entities.Tenants.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("golden_snitch.Entities.Tenants.ClaimSet", null)
                        .WithMany("Claims")
                        .HasForeignKey("ClaimSetId");

                    b.Navigation("Action");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tenants.ClaimSet", b =>
                {
                    b.HasOne("golden_snitch.Entities.Users.User", null)
                        .WithMany("ClaimSets")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tickets.Ticket", b =>
                {
                    b.HasOne("golden_snitch.Entities.Scheduler.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.HasOne("golden_snitch.Entities.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("golden_snitch.Entities.Tickets.TicketTag", "Tag")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTagId");

                    b.Navigation("Job");

                    b.Navigation("Owner");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tickets.TicketComment", b =>
                {
                    b.HasOne("golden_snitch.Entities.Tickets.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tickets.TicketHour", b =>
                {
                    b.HasOne("golden_snitch.Entities.Tickets.Ticket", "Ticket")
                        .WithMany("Hours")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("golden_snitch.Entities.Scheduler.JobTag", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tenants.ClaimSet", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tickets.Ticket", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Hours");
                });

            modelBuilder.Entity("golden_snitch.Entities.Tickets.TicketTag", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("golden_snitch.Entities.Users.User", b =>
                {
                    b.Navigation("ClaimSets");
                });
#pragma warning restore 612, 618
        }
    }
}
